The files in this directory define general categorical interfaces and
constructions using Coq's module system. The idea is less to formalize
the categorical concepts, and more to ensure that models with similar
structures follow a uniform interface, and that moderate amounts
of code reuse are possible.

Ultimately, I want us to be able to write things like this,
enumerating the structures we need for a particular application:

    Module Type ObjSem :=
      Category <+ Cartesian
               <+ Tensor
               <+ Before
               <+ CofreeComonoid Bef
               <+ EffectAlgebras
               <+ Enriched CDLat.

Then we could carry out our work independently of a concrete model:

    Module MyThing (C : ObjSem).
      Import C.
    
      ...
    
    End MyThing.

In general, for an interface `Foo` we proceed as follows:

  * The module type `FooDef` enumerates the data which must be provided
    to define a structure of kind `Foo`.

  * The module `FooTheory` contains standard definitions and properties
    which can be derived from `FooDef` and are expected to be included
    with all instances of the structure.

  * The module type `Foo := FooDef <+ FooTheory` can be used as the
    overall type for instances of the structure.

Module types and module functors which build further on top of Foo can
depend on an instance of the `Foo` module type, or `FooDef` in cases
where that is sufficient.
