# Unifying Compositional Verification and Certified Compilation with a Three-Dimensional Refinement Algebra

This is a mechanized proof artifact to accompany the POPL 2025 paper
with the title above, in the form of Coq source code. It includes:

  * CompCertO, a version of CompCert with open semantics;
  * the `coqrel` library, to help with relational reasoning;
  * some support code to deal with the free sup-lattice construction
    (downward closed sets);
  * a mechanization in `models/IntStrat.v` of the framework described
    in the paper (§2–5);
  * some of the experiments described in §6.

This README file outlines how to build the proofs and the correspondence
between the paper and the code.

## Supported claims

The claims in our submitted paper when it comes to mechanization are
unfortunately rather non-specific, simply stating "Our work has been
mechanized in the Coq proof assistant" at the end of §1.4. We plan to
discuss the implementation in more details in our revised paper,
including the following description of what has been implemented.

### Main framework (§2–5)

The code in this artifact mechanizes every definition and theorem
appearing in the main part of the paper (§2–5), which describes our
refinement framework. This has been formalized in the file
`models/IntStrat.v`, which follows the structure of the paper exactly
and cross-references all sections, definitions and theorems by name.

There are two small discrepancies between the submitted version of our
paper and the mechanized version:

  * Definition 3.3: the definition in the submitted paper should be
    amended to state that a *regular* strategy is the closure σ* of a
    strategy σ *which handles only a single incoming question*. We will
    make this change in our revised paper.

  * Theorem 4.5: although the submitted paper states an equivalence,
    we have only proved that refinement squares can be obtained from
    inclusion properties. We will update the theorem in our revised
    paper to match our mechanization.

Everything else should match what is described in the paper exactly.

### Applications

In addition, we have provided code for some (but not all) of the
applications described in §6, including our embedding of CompCertO
semantics (§6.1), the example shown in the introduction (§6.3), 
the certified abstraction layers (§6.4), and the ClightP semantics (§6.3).

## Setting up the build environment

You will need a recent version of Coq and other tools supported by the
versions of CompCert and `coqrel` we are using. If you are using `opam`
(recommended), an appropriate environment can be set up as follows:

    $ opam init
    $ eval $(opam env --switch=default)  # as instructed by opam init
    $ opam install coq.8.15.2 menhir.20240715

Once Coq and Menhir have been installed, run the script

    $ ./configure

(For macos users, you may need to edit the `configure` script to replace
`x86_64-linux` with `x86_64-macos` on line 22 before executing the script.)


At this point make sure there were no error messages. In particular
if your versions of Coq, Menhir, etc. are not suitable to build
CompCert or `coqrel`, this is when things will break. Warnings about
the `install-doc` target can be safely ignored.

If the configuration was successful you should be able to build the
development using `make`. We recommend using the `-jN` option to enable
parallel jobs as CompCert will take a while to build otherwise.
For example on an 8-cores machine:

    $ make -j8

## Evaluation instructions

After verifying that the proofs compile successfully, we suggest that
the reviewers look through the paper and the development side-by-side.

To this end, it may be helpful to run

    $ make html

This will generate `coqdoc` web pages in the `html/` subdirectory.
In particular, the file `html/toc.html` offers an overview of the
development's structure, including hyperlinked references to the code
corresponding to specific sections, definitions and theorems found in
the paper.

## Directory structure

Overall, the artifact is structured as follows:

  * `coqrel/` contains a copy of the `coqrel` library
  * `compcert/` contains a version of CompCertO
  * `structures/Poset.v`
    `structures/Lattice.v`,
    `structures/Completion.v`, and
    `lattices/Downset.v` offer generic definitions which formalize
    downward-closed sets as the free sup-lattice generated by a poset.
    Only the most basic constructions are used by our development.
  * `models/IntStrat.v` is our main development, which formalizes
    the material presented in §2–5.
  * `examples/CompCertStrat.v` contains the embedding of CompCertO 
    semantics into the strategy model as described in §6.1.
  * `examples/Rot13.v` contains the verification details of the rot13
    example as presented in §6.3.
  * `examples/Composition.v` formalizes the certified abstraction layers
    as described in §6.4 and Appendix C.
  * `examples/clightp/ClightP.v` and `examples/clightp/ClightPComp.v` 
    contains the formalization of the ClightP semantics and its 
    composition property as described in §6.5 and Appendix D.

