# Unifying Compositional Verification and Certified Compilation with a Three-Dimensional Refinement Algebra

This is a mechanized proof artifact to accompany the POPL 2025 paper
with the title above, in the form of Coq source code. It includes:

  * CompCertO, a version of CompCert with open semantics;
  * the `coqrel` library, to help with relational reasoning;
  * some support code to deal with the free sup-lattice construction
    (downward closed sets);
  * a mechanization in `models/IntStrat.v` of the framework described
    in the paper (¬ß2‚Äì5);
  * some of the experiments described in ¬ß6.

This README file outlines how to build the proofs and the correspondence
between the paper and the code.

## Supported claims

The claims in our submitted paper when it comes to mechanization are
unfortunately rather non-specific, simply stating "Our work has been
mechanized in the Coq proof assistant" at the end of ¬ß1.4. We plan to
discuss the implementation in more details in our revised paper,
including the following description of what has been implemented.

### Main framework (¬ß2‚Äì5)

The code in this artifact mechanizes every definition and theorem
appearing in the main part of the paper (¬ß2‚Äì5), which describes our
refinement framework. This has been formalized in the file
`models/IntStrat.v`, which follows the structure of the paper exactly
and cross-references all sections, definitions and theorems by name.

The following table summarizes the correspondence between notations
used in the paper and their rendering in the code: 

 | Notation for            | Paper     | Coq code                  |
 |-------------------------|-----------|---------------------------|
 | Strategy                | E ‚Ü† F     | `E ->> F` (`strat E F`)   |
 | Refinement convention   | E ‚Üî F     | `E <=> F` (`conv E F`)    |
 | Simple refinement       | ‚â§         | `[=` (`ref`)              |
 | Refinement square       | ‚â§{R ‚Ü† S}  | `rsq`                     |
 | Layered composition     | ‚äô         | `‚äô` (`compose`)           |
 | Vertical composition    | ;         | `;;` (`vcomp`)            |
 | Flat composition        | ‚äï         | `+` (`fcomp`)             |
 | Spatial composition     | @         | `@` (`scomp`)             |
 | Empty signature         | 0         | `0` (`Empty_sig`)         |
 | Unit signature          | {* : ùüô}   | `1`                       |
 | Diagonal morphism for ‚äï | Œî         | `fdup`                    |
 | Braiding for ‚äï          | Œ≥         | `fswap`                   |
 | Projections for ‚äï       | œÄ‚ÇÅ, œÄ‚ÇÇ    | `ffst`, `fsnd`            |
 | Residual strategy       | m \ œÉ     | `next m œÉ`                |
 | Residual convention     | q‚ÇÅq‚ÇÇ‚ãØ \ R | `rcnext q1 q2 r1 r2 R`    |

### Applications (¬ß6)

In addition, we have provided code for most of the applications
described in ¬ß6. See examples/README.mdwn for a detailed break-down.

## Setting up the build environment

You will need a version of Coq and other tools supported by the versions
of CompCert and `coqrel` we are using. If you wish to use `opam`
(recommended), the following is known to work as of 2024-11-21:

    $ opam switch create rbgs ocaml-base-compiler.4.08.1
    $ eval $(opam env --switch=rbgs)  # as instructed by previous command
    $ opam install coq.8.15.2 menhir.20240715

Later versions of OCaml 4 have been reported to work as well.
Once Coq and Menhir have been installed, run the `configure` script.
Note that macOS users will need to edit the script before running it
to replace `x86_64-linux` with `x86_64-macos` on line 22.

    $ sed -i s/-linux/-macos/ configure  # macOS users only
    $ ./configure

At this point make sure there were no error messages. In particular
if your versions of Coq, Menhir, etc. are not suitable to build
CompCert or `coqrel`, this is when things will break. Warnings about
the `install-doc` target can be safely ignored.

If the configuration was successful you should be able to build the
development using `make`. We recommend using the `-jN` option to enable
parallel jobs as CompCert will take a while to build otherwise.
For example on an 8-cores machine:

    $ make -j8

## Evaluation instructions

After verifying that the proofs compile successfully, we suggested that
the reviewers look through the paper and the development side-by-side.

To this end, it can be helpful to run

    $ make html

This will generate `coqdoc` web pages in the `html/` subdirectory.
In particular, the file `html/toc.html` offers an overview of the
development's structure, including hyperlinked references to the code
corresponding to specific sections, definitions and theorems found in
the paper.

## Directory structure

Overall, the artifact is structured as follows:

  * `coqrel/` contains a copy of the `coqrel` library
  * `compcert/` contains a version of CompCertO
  * `structures/Poset.v`
    `structures/Lattice.v`,
    `structures/Completion.v`, and
    `lattices/Downset.v` offer generic definitions which formalize
    downward-closed sets as the free sup-lattice generated by a poset.
    Only the most basic constructions are used by our development.
  * `models/IntStrat.v` is our main development, which formalizes
    the material presented in ¬ß2‚Äì5.
  * `examples/Application.v` corresponds to ¬ß6. A more detailed
    [readme](examples/README.mdwn) is available in the `examples/` directory.

## Acknowledgments

We are very grateful to the anonymous members of the POPL 2025 Artifact
Evaluation Committee who reviewed our artifact. In particular their
feedback and suggestions helped us significantly improve the contents
of this file.
